import pandas as pd
import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

df = pd.read_csv('user_data_ex.csv')  # 데이터 가져오기
df['keyword'] = df['keyword'].fillna('')
df['want_keyword'] = df['want_keyword'].fillna('')
df['match_record'] = df['match_record'].fillna('')

def similar_rank(keyword1, keyword2, df): #두 키워드 간의 코사인 유사도 계산
    # TF-IDF 벡터화
    vectorizer = TfidfVectorizer()
    tfidf_matrix1 = vectorizer.fit_transform(df[keyword1])
    tfidf_matrix2 = vectorizer.fit_transform(df[keyword2])

    # 코사인 유사도 계산
    cosine_sim = linear_kernel(tfidf_matrix1, tfidf_matrix2)

    return cosine_sim

# id(index)랑 순서 넘버만 있는 데이터
indices = pd.Series(df.index, index = df['id'])
#cosine similar 변수 초기화
csm = 0

# 나중에 get_recommandations(id) 함수에 넣을 코드
# get_recommandations(id) 함수 쓸 때의 해당 유저 id가 yoona126이라 가정
id = 'yoona126'

# user는 유저 id에 해당하는 row만 추출한 데이터
user = df[df['id'] == id].iloc[0]

# 유저가 원하는 성별, 연령대에 맞는 사람들의 집합 = new_df
df_sex = user['other_sex']
df_age = user['other_age']
new_df = df[(df['sex'] == df_sex) & (df['age'] == df_age)]

# match_record가 비어있으면 want_keyword로 유사도 측정
match_record = user['match_record']
if user['match_record'] == '':
    csm = similar_rank('keyword', 'want_keyword', new_df)
    '''
    슬라이싱..
    '''

# match _record가 존재하는 경우 5, 4, 1, 2점에게 가중치
# else :
data_list = json.loads(match_record)

# 5점인 사람들의 id
result_ids = [data["id"] for data in data_list if data["score"] == 5]
